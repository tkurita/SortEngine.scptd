{\rtf1\ansi\ansicpg932\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fnil\fcharset128 HiraKakuProN-W3;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red108\green5\blue211;\red0\green0\blue255;
\red64\green128\blue0;\red0\green22\blue176;\red76\green78\blue78;\red74\green30\blue127;}
\deftab480
\pard\pardeftab480\slleading20\ql\qnatural\pardirnatural

\f0\b\fs24 \cf2 property
\b0  \cf3 name\cf2  : "SortEngine"\
\pard\pardeftab480\slleading20\ql\qnatural\pardirnatural

\b \cf2 property
\b0  
\i \cf4 version
\i0 \cf2  : "2.1.1"\

\b property
\b0  \cf5 XList\cf2  : 
\b \cf6 module
\b0 \cf2 \
\
\cf7 -- compmarator scripts\cf2 \

\b script
\b0  \cf5 BaseComparator\cf2 \
	
\b on
\b0  \cf5 do\cf2 (\cf5 a_first\cf2 , \cf5 a_second\cf2 )\
		
\b if
\b0  (\cf5 a_first\cf2  > \cf5 a_second\cf2 ) 
\b then
\b0 \
			\cf7 (*\
			log ("first " & a_first)\
			log ("second " & a_second)\
			log "large"\
			*)\cf2 \
			
\b return
\b0  1\
		
\b else
\b0  
\b if
\b0  (\cf5 a_first\cf2  < \cf5 a_second\cf2 ) 
\b then
\b0 \
			
\b return
\b0  -1\
		
\b else
\b0 \
			
\b return
\b0  0\
		
\b end
\b0  
\b if
\b0 \
	
\b end
\b0  \cf5 do\cf2 \

\b end
\b0  
\b script
\b0 \
\
\cf7 (*!@glossary\
XList || help:openbook='XList Help'\
*)\cf2 \
\
\cf7 (*!@title SortEngine Reference\
* Version : 2.1.1\
* Author : Tetsuro KURITA ((<tkurita@mac.com>))\
*)\cf2 \
\
\cf7 (*!@group Constructor Methods *)\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\

\f1 \'83\'66\'83\'74\'83\'48\'83\'8b\'83\'67\'82\'cc\'90\'dd\'92\'e8\'82\'cc
\f0  instance 
\f1 \'82\'f0\'90\'b6\'90\'ac\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Make a new instance of default settings.\
<!-- end locale -->\
@result script object :\
<!-- begin locale ja -->SortEngine 
\f1 \'82\'cc
\f0  
\f1 \'90\'56\'82\'b5\'82\'a2
\f0  instance\
<!-- begin locale en -->A new instance of SortEngine<!-- end locale -->\
*)\cf2 \

\b on
\b0  
\b \cf4 make
\b0 \cf2 \
	
\b script
\b0  \cf5 SortEngine\cf2 \
		
\b property
\b0  \cf5 _comparator\cf2  : 
\b my
\b0  \cf5 _comparator\cf2 \
		
\b property
\b0  \cf5 _sort_direction\cf2  : 
\b my
\b0  \cf5 _sort_direction\cf2 \
		
\b property
\b0  \cf5 _sort_handler\cf2  : 
\b my
\b0  \cf5 _sort_handler\cf2 \
	
\b end
\b0  
\b script
\b0 \
	\
	
\b return
\b0  \cf5 SortEngine\cf2 \

\b end
\b0  
\b \cf4 make
\b0 \cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\
record 
\f1 \'82\'f0\'88\'f8\'90\'94\'82\'c9\'97\'5e\'82\'a6\'82\'e9\'82\'b1\'82\'c6\'82\'c9\'82\'e6\'82\'e8\'81\'41\'83\'49\'83\'76\'83\'56\'83\'87\'83\'93\'82\'f0\'90\'dd\'92\'e8\'82\'b5\'82\'c4\'81\'41\'90\'56\'82\'b5\'82\'a2
\f0  instance 
\f1 \'82\'f0\'90\'b6\'90\'ac\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Make a new instance with passing a record which describes options.\
<!-- end locale -->\
@description\
<!-- begin locale ja -->\

\f1 \'88\'f8\'90\'94\'82\'c9\'97\'5e\'82\'a6\'82\'e9\'83\'8c\'83\'52\'81\'5b\'83\'68\'82\'cc\'83\'89\'83\'78\'83\'8b\'82\'cd\'88\'c8\'89\'ba\'82\'cc\'8e\'ed\'97\'de\'82\'aa\'82\'a0\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
* ascending (boolean) : 
\f1 \'83\'5c\'81\'5b\'83\'67\'8f\'87\'8f\'98\'81\'42\'8f\'b8\'8f\'87
\f0 : true, 
\f1 \'8d\'7e\'8f\'87
\f0  :false
\f1 \'81\'42\'8f\'c8\'97\'aa\'82\'b7\'82\'e9\'82\'c6\'8f\'b8\'8f\'87\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
* sorter (string) : 
\f1 \'8e\'67\'97\'70\'82\'b7\'82\'e9\'83\'5c\'81\'5b\'83\'67\'82\'cc\'83\'41\'83\'8b\'83\'53\'83\'8a\'83\'59\'83\'80\'82\'f0\'8e\'77\'92\'e8\'82\'b5\'82\'dc\'82\'b7\'81\'42\'83\'4e\'83\'43\'83\'62\'83\'4e\'83\'5c\'81\'5b\'83\'67
\f0  
\f1 \'82\'f0\'8e\'67\'97\'70\'82\'b7\'82\'e9\'82\'c6\'82\'ab\'82\'cd
\f0  "quick"
\f1 \'81\'41\'83\'6f\'83\'75\'83\'8b\'83\'5c\'81\'5b\'83\'67\'82\'f0\'8e\'67\'97\'70\'82\'b7\'82\'e9
\f0  "bubble" 
\f1 \'82\'f0\'97\'5e\'82\'a6\'82\'dc\'82\'b7\'81\'42\'8f\'c8\'97\'aa\'82\'b7\'82\'e9\'82\'c6\'81\'41\'83\'4e\'83\'43\'83\'62\'83\'4e\'83\'5c\'81\'5b\'83\'67\'81\'42
\f0 \
* comparator (script object): AppleScript 
\f1 \'82\'cc\'94\'e4\'8a\'72\'89\'89\'8e\'5a\'8e\'71\'82\'c5\'88\'b5\'82\'a6\'82\'c8\'82\'a2\'92\'6c\'82\'f0\'83\'5c\'81\'5b\'83\'67\'82\'b7\'82\'e9\'8e\'9e\'82\'c9\'81\'41\'91\'e5\'8f\'ac\'8a\'d6\'8c\'57\'82\'f0\'92\'e8\'8b\'60\'82\'b7\'82\'e9
\f0  script object
\f1 \'81\'42
\f0 \
<!-- begin locale en -->\
The record to pass as an argument can have following labels.\
* ascending (boolean) : Set sorting order. For descending order, false must be given. If omitted, sort in ascending order.\
* sorter (string) : Sorting algorithm. "quick" indicates the quick sort. "bubble" indicates the bubble sort. The quick sort is used in the default.\
* comparator (script object): A script object to define magnitude relation of values which can not deal with comparison operators of AppleScript.\
<!-- end locale -->\
@param a_record (record):\
<!-- begin locale ja -->
\f1 \'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'cc\'83\'49\'83\'76\'83\'56\'83\'87\'83\'93
\f0 \
<!-- begin locale en -->Options for a new instance\
<!-- end locale -->\
@result script object :\
<!-- begin locale ja -->SortEngine 
\f1 \'82\'cc
\f0  
\f1 \'90\'56\'82\'b5\'82\'a2
\f0  instance\
<!-- begin locale en -->A new instance of SortEngine<!-- end locale -->\
*)\cf2 \

\b on
\b0  \cf5 make_with\cf2 (\cf5 a_record\cf2 )\
	
\b set
\b0  \cf5 a_sorter\cf2  
\b to
\b0  
\b \cf4 make
\b0 \cf2 \
	
\b try
\b0 \
		
\b set
\b0  \cf5 a_name\cf2  
\b to
\b0  \cf5 a_record\cf2 's \cf5 sorter\cf2 \
		
\b if
\b0  \cf5 a_name\cf2  
\b starts with
\b0  "quick" 
\b then
\b0 \
			\cf5 a_sorter\cf2 's \cf5 use_quicksort\cf2 ()\
		
\b else
\b0  
\b if
\b0  \cf5 a_name\cf2  
\b starts with
\b0  "bubble" 
\b then
\b0 \
			\cf5 a_sorter\cf2 's \cf5 use_bubblesort\cf2 ()\
		
\b else
\b0 \
			
\b error
\b0  (\cf5 a_name\cf2  & " is unknown sorter specification.") \cf4 number\cf2  930\
		
\b end
\b0  
\b if
\b0 \
	
\b end
\b0  
\b try
\b0 \
	\
	
\b try
\b0 \
		\cf5 a_sorter\cf2 's \cf5 set_comparator\cf2 (\cf5 a_record\cf2 's \cf5 comparator\cf2 )\
	
\b end
\b0  
\b try
\b0 \
	\
	
\b try
\b0 \
		\cf5 a_sorter\cf2 's \cf5 set_ascending\cf2 (\cf5 a_record\cf2 's \cf5 ascending\cf2 )\
	
\b end
\b0  
\b try
\b0 \
	
\b return
\b0  \cf5 a_sorter\cf2 \

\b end
\b0  \cf5 make_with\cf2 \
\
\cf7 (*!@group Class method *)\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\
SortEngine 
\f1 \'82\'c9\'93\'e0\'91\'a0\'82\'b3\'82\'ea\'82\'c4\'82\'a2\'82\'e9
\f0  comparator script 
\f1 \'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Obtain default comparator script in embedded in SortEngine.\
<!-- end locale -->\
@description\
<!-- begin locale ja -->\
AppleScript 
\f1 \'82\'cc\'94\'e4\'8a\'72\'89\'89\'8e\'5a\'8e\'71\'82\'c5\'88\'b5\'82\'a6\'82\'e9\'92\'6c\'82\'f0\'83\'5c\'81\'5b\'83\'67\'82\'b7\'82\'e9\'8e\'9e\'82\'c9\'8e\'67\'82\'a2\'82\'dc\'82\'b7\'81\'42\'83\'66\'83\'74\'83\'48\'83\'8b\'83\'67\'82\'cc
\f0  comparator script 
\f1 \'82\'c5\'82\'b7\'81\'42
\f0 \
\

\f1 \'83\'4a\'83\'58\'83\'5e\'83\'80\'82\'c8
\f0  comparator script 
\f1 \'82\'f0\'8d\'ec\'82\'e9\'82\'c6\'8e\'9e\'82\'c9\'81\'41\'8c\'70\'8f\'b3\'82\'b7\'82\'e9\'82\'c6\'93\'73\'8d\'87\'82\'aa\'82\'a2\'82\'a2\'82\'c5\'82\'b5\'82\'e5\'82\'a4\'81\'42
\f0 \
<!-- begin locale en -->\
This script object is default comparator script. This is used to sort values which can be deal with AppleScript's comparison operators.\
\
The inheriting this script object is useful to make a custom comparator script.\
<!-- end locale -->\
@result script object\
*)\cf2 \

\b on
\b0  \cf5 base_comparator\cf2 ()\
	
\b return
\b0  \cf5 BaseComparator\cf2 \

\b end
\b0  \cf5 base_comparator\cf2 \
\
\cf7 (*!@group Do Sort *)\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'f0\'83\'5c\'81\'5b\'83\'67\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Sort a list.\
<!-- end locale -->\
@param a_list (list) :\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'82\'b7\'82\'e9\'83\'8a\'83\'58\'83\'67
\f0 \
<!-- begin locale en -->a list to sort\
<!-- end locale -->\
@result list : \
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'82\'b3\'82\'ea\'82\'bd\'83\'8a\'83\'58\'83\'67\'81\'42\'95\'d4\'82\'e8\'92\'6c\'82\'c6\'88\'f8\'90\'94\'82\'cd\'93\'af\'82\'b6\'83\'8a\'83\'58\'83\'67\'82\'c5\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->A sorted list. The return list is identical to the list passed as an argument.<!-- end locale -->\
*)\cf2 \

\b on
\b0  \cf5 sort_list\cf2 (\cf5 a_list\cf2 )\
	
\b set
\b0  \cf5 a_xlist\cf2  
\b to
\b0  \cf5 XList\cf2 's \cf5 make_with\cf2 (\cf5 a_list\cf2 )\
	
\b return
\b0  \cf5 sort_xlist\cf2 (\cf5 a_xlist\cf2 )'s \cf5 list_ref\cf2 ()\

\b end
\b0  \cf5 sort_list\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\
((<XList>)) 
\f1 \'82\'f0\'83\'5c\'81\'5b\'83\'67\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Sort a XList.\
<!-- end locale -->\
@param a_xlist (XList) :\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'82\'b7\'82\'e9
\f0  ((<XList>)) 
\f1 \'82\'cc\'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58
\f0 \
<!-- begin locale en -->an instance of ((<XList>)) to sort\
<!-- end locale -->\
@result list : XList\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'82\'b3\'82\'ea\'82\'bd
\f0  ((<XList>))
\f1 \'81\'42\'95\'d4\'82\'e8\'92\'6c\'82\'c6\'88\'f8\'90\'94\'82\'cd\'93\'af\'82\'b6
\f0  XList 
\f1 \'82\'cc\'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'c5\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->A sorted ((<XList>)) instance. The return XList is identical to the XList passed as an argument.<!-- end locale -->\
*)\cf2 \

\b on
\b0  \cf5 sort_xlist\cf2 (\cf5 a_xlist\cf2 )\
	
\b set
\b0  \cf5 a_xlist\cf2  
\b to
\b0  \cf5 XList\cf2 's \cf5 make_with\cf2 (\{\cf5 a_xlist\cf2 \})\
	
\b return
\b0  
\b my
\b0  \cf5 _sort_handler\cf2 (\cf5 a_xlist\cf2 , 1)'s \cf5 item_at\cf2 (1)\

\b end
\b0  \cf5 sort_xlist\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\

\f1 \'8e\'77\'92\'e8\'82\'b5\'82\'bd\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc\'83\'8a\'83\'58\'83\'67\'82\'f0\'8a\'ee\'8f\'80\'82\'c9\'82\'b5\'82\'c4\'81\'41\'82\'51\'8e\'9f\'8c\'b3\'83\'8a\'83\'58\'83\'67\'82\'cc\'82\'bb\'82\'ea\'82\'bc\'82\'ea\'82\'cc\'83\'8a\'83\'58\'83\'67\'82\'f0\'83\'5c\'81\'5b\'83\'67\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Sort each list in two dimensional list according to the order of the list of the specified index.\
<!-- end locale -->\
@param
\f1 \'81\'40
\f0 a_list2d (list of lists) :\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'82\'b7\'82\'e9\'83\'8a\'83\'58\'83\'67\'82\'cc\'83\'8a\'83\'58\'83\'67
\f0 \
<!-- begin locale en --> a list of to sort each list in it.\
<!-- end locale -->\
@param key_index (integer) :\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'8f\'87\'8f\'98\'82\'f0\'8c\'88\'92\'e8\'82\'b7\'82\'e9\'83\'8a\'83\'58\'83\'67\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!-- begin locale en -->An index of a list which determine the sorting order.\
<!-- end locale -->\
@result list of lists :\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'82\'b3\'82\'ea\'82\'bd
\f0 2
\f1 \'8e\'9f\'8c\'b3\'83\'8a\'83\'58\'83\'67\'81\'42\'95\'d4\'82\'e8\'92\'6c\'82\'c6\'88\'f8\'90\'94\'82\'cd\'93\'af\'82\'b6\'83\'8a\'83\'58\'83\'67\'82\'c5\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->A sorted two dimensional list. The returned list is identical to the list passed as an argument.<!-- end locale -->\
*)\cf2 \

\b on
\b0  \cf5 sort_table\cf2 (\cf5 a_list2d\cf2 , \cf5 key_index\cf2 )\
	
\b set
\b0  \cf5 a_xlist2d\cf2  
\b to
\b0  \cf5 XList\cf2 's \cf5 make_with\cf2 (\cf5 a_list2d\cf2 )\
	
\b script
\b0  \cf5 XListConverter\cf2 \
		
\b on
\b0  \cf5 do\cf2 (\cf5 a_ref\cf2 )\
			
\b return
\b0  \cf5 XList\cf2 's \cf5 make_with\cf2 (\cf3 contents\cf2  
\b of
\b0  \cf5 a_ref\cf2 )\
		
\b end
\b0  \cf5 do\cf2 \
	
\b end
\b0  
\b script
\b0 \
	
\b set
\b0  \cf5 a_xlist2d\cf2  
\b to
\b0  \cf5 a_xlist2d\cf2 's \cf5 map\cf2 (\cf5 XListConverter\cf2 )\
	
\b my
\b0  \cf5 _sort_handler\cf2 (\cf5 a_xlist2d\cf2 , \cf5 key_index\cf2 )\
	\
	
\b script
\b0  \cf5 UnBox\cf2 \
		
\b on
\b0  \cf5 do\cf2 (\cf5 a_xlist\cf2 )\
			
\b return
\b0  \cf5 a_xlist\cf2 's \cf5 list_ref\cf2 ()\
		
\b end
\b0  \cf5 do\cf2 \
	
\b end
\b0  
\b script
\b0 \
	
\b return
\b0  \cf5 a_xlist2d\cf2 's \cf5 map_as_list\cf2 (\cf5 UnBox\cf2 )\

\b end
\b0  \cf5 sort_table\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\
2
\f1 \'8e\'9f\'8c\'b3\'82\'cc
\f0  ((<XList>)) 
\f1 \'82\'f0\'83\'5c\'81\'5b\'83\'67\'82\'b5\'82\'dc\'82\'b7\'81\'42\'8e\'77\'92\'e8\'82\'b5\'82\'bd\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc
\f0  XList 
\f1 \'82\'f0\'8a\'ee\'8f\'80\'82\'c9\'82\'b5\'82\'c4\'81\'41\'82\'bb\'82\'ea\'82\'bc\'82\'ea\'82\'cc
\f0  XList 
\f1 \'82\'f0\'83\'5c\'81\'5b\'83\'67\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Sort each ((<XList>)) in two dimensional XList according to the order of the sub XList of the specified index.\
<!-- end locale -->\
@description\
<!-- begin locale ja -->\
2
\f1 \'8e\'9f\'8c\'b3\'82\'cc
\f0  XList 
\f1 \'82\'c6\'82\'cd\'81\'41\'82\'b7\'82\'d7\'82\'c4\'82\'cc\'97\'76\'91\'66\'82\'aa
\f0  XList 
\f1 \'82\'c5\'82\'a0\'82\'e9
\f0  XList 
\f1 \'82\'c5\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
A two dimensional XList means an XList instance of which all elements are XList instances.\
<!-- end locale -->\
@param
\f1 \'81\'40
\f0 a_list2d (list of lists) :\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'82\'b7\'82\'e9
\f0  ((<XList>)) 
\f1 \'82\'f0\'97\'76\'91\'66\'82\'c6\'82\'b5\'82\'bd
\f0  ((<XList>))\
<!-- begin locale en --> a XList instance of to sort each XList instance in it.\
<!-- end locale -->\
@param key_index (integer) :\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'8f\'87\'8f\'98\'82\'f0\'8c\'88\'92\'e8\'82\'b7\'82\'e9
\f0  XLIst 
\f1 \'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!-- begin locale en -->An index of a XList instance which determine the sorting order.\
<!-- end locale -->\
@result list of lists :\
<!-- begin locale ja -->
\f1 \'83\'5c\'81\'5b\'83\'67\'82\'b3\'82\'ea\'82\'bd
\f0 2
\f1 \'8e\'9f\'8c\'b3
\f0  XList
\f1 \'81\'42\'95\'d4\'82\'e8\'92\'6c\'82\'c6\'88\'f8\'90\'94\'82\'cd\'93\'af\'82\'b6
\f0  XList 
\f1 \'82\'cc\'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'c5\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->A sorted two deimensional XList instance. The returned XList instance is identical to the XList instance passed as an argument.<!-- end locale -->\
*)\cf2 \

\b on
\b0  \cf5 sort_xtable\cf2 (\cf5 a_xlist2d\cf2 , \cf5 key_index\cf2 )\
	
\b return
\b0  
\b my
\b0  \cf5 _sort_handler\cf2 (\cf5 a_xlist2d\cf2 , \cf5 key_index\cf2 )\

\b end
\b0  \cf5 sort_xtable\cf2 \
\
\cf7 (*!@group Accessor Methods *)\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\

\f1 \'90\'dd\'92\'e8\'82\'b3\'82\'ea\'82\'c4\'82\'a2\'82\'e9\'83\'5c\'81\'5b\'83\'67\'8f\'87\'8f\'98\'82\'aa\'8f\'b8\'8f\'87\'82\'c8\'82\'e7
\f0  true 
\f1 \'82\'f0\'95\'d4\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Return true when sorting order of the instance is ascending.\
<!-- end locale -->\
@result boolean : \
<!-- begin locale ja --> true
\f1 \'81\'40
\f0 : 
\f1 \'8f\'b8\'8f\'87
\f0 , false : 
\f1 \'8d\'7e\'8f\'87
\f0 \
<!-- begin locale en -->true : ascending, false : descending <!-- end locale -->\
*)\cf2 \

\b on
\b0  \cf5 is_ascending\cf2 ()\
	
\b return
\b0  
\b my
\b0  \cf5 _sort_direction\cf2  
\b is
\b0  1\

\b end
\b0  \cf5 is_ascending\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\

\f1 \'83\'5c\'81\'5b\'83\'67\'8f\'87\'8f\'98\'82\'f0\'90\'dd\'92\'e8\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Set sorting order.\
<!-- end locale -->\
@param a_flag (boolean) :\
<!-- begin locale ja -->true : 
\f1 \'8f\'b8\'8f\'87
\f0 , false : 
\f1 \'8d\'7e\'8f\'87
\f0 \
<!-- begin locale en -->true : ascending, false : descending\
<!-- end locale -->\
@result script object : me\
*)\cf2 \

\b on
\b0  \cf5 set_ascending\cf2 (\cf5 a_flag\cf2 )\
	
\b if
\b0  \cf5 a_flag\cf2  
\b then
\b0 \
		
\b set
\b0  
\b my
\b0  \cf5 _sort_direction\cf2  
\b to
\b0  1\
	
\b else
\b0 \
		
\b set
\b0  
\b my
\b0  \cf5 _sort_direction\cf2  
\b to
\b0  -1\
	
\b end
\b0  
\b if
\b0 \
	
\b return
\b0  
\b me
\b0 \

\b end
\b0  \cf5 set_ascending\cf2 \
\

\b on
\b0  \cf5 bubblesort_list2d\cf2 (\cf5 a_xlist2d\cf2 , \cf5 key_index\cf2 ) \cf7 -- must be placed before use_bubblesort\cf2 \
	\cf7 --set keylist to XList's make_with(item key_index of a_list2d)\cf2 \
	
\b set
\b0  \cf5 keylist\cf2  
\b to
\b0  \cf5 a_xlist2d\cf2 's \cf5 item_at\cf2 (\cf5 key_index\cf2 )\
	
\b set
\b0  \cf5 list_len\cf2  
\b to
\b0  \cf5 keylist\cf2 's \cf5 count_items\cf2 ()\
	\
	
\b if
\b0  \cf5 list_len\cf2  
\b is
\b0  
\b less than
\b0  
\b or
\b0  
\b equal to
\b0  1 
\b then
\b0 \
		
\b return
\b0  \cf5 a_xlist2d\cf2 \
	
\b end
\b0  
\b if
\b0 \
	\
	\cf7 --do sort\cf2 \
	
\b repeat
\b0 \
		
\b set
\b0  \cf5 sorted_count\cf2  
\b to
\b0  0\
		
\b repeat
\b0  
\b with
\b0  \cf5 i\cf2  
\b from
\b0  1 
\b to
\b0  (\cf5 list_len\cf2  - 1)\
			
\b set
\b0  \cf5 a_first\cf2  
\b to
\b0  \cf5 keylist\cf2 's \cf5 item_at\cf2 (\cf5 i\cf2 )\
			
\b set
\b0  \cf5 a_secont\cf2  
\b to
\b0  \cf5 keylist\cf2 's \cf5 item_at\cf2 (\cf5 i\cf2  + 1)\
			\cf7 (*\
			copy item i of keylist to a_first\
			copy item (i + 1) of keylist to a_second\
			*)\cf2 \
			
\b set
\b0  \cf5 a_result\cf2  
\b to
\b0  \cf5 do\cf2 (\cf5 a_first\cf2 , \cf5 a_secont\cf2 ) 
\b of
\b0  
\b my
\b0  \cf5 _comparator\cf2 \
			\cf7 -- 1,firstItem > secondItem\cf2 \
			\cf7 -- 0, firstItem = secondItem\cf2 \
			\cf7 -- -1 firstItem < secondItem\cf2 \
			\
			
\b if
\b0  \cf5 a_result\cf2  
\b is
\b0  
\b my
\b0  \cf5 _sort_direction\cf2  
\b then
\b0 \
				\cf5 exchange_item\cf2 (\cf5 i\cf2 , \cf5 i\cf2  + 1, \cf5 a_xlist2d\cf2 )\
			
\b else
\b0 \
				
\b set
\b0  \cf5 sorted_count\cf2  
\b to
\b0  \cf5 sorted_count\cf2  + 1\
			
\b end
\b0  
\b if
\b0 \
		
\b end
\b0  
\b repeat
\b0 \
		
\b if
\b0  \cf5 sorted_count\cf2  
\b is
\b0  (\cf5 list_len\cf2  - 1) 
\b then
\b0  
\b exit
\b0  
\b repeat
\b0 \
	
\b end
\b0  
\b repeat
\b0 \
	
\b return
\b0  \cf5 a_xlist2d\cf2 \

\b end
\b0  \cf5 bubblesort_list2d\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\

\f1 \'83\'5c\'81\'5b\'83\'67\'83\'41\'83\'8b\'83\'53\'83\'8a\'83\'59\'83\'80\'82\'f0\'83\'4e\'83\'43\'83\'62\'83\'4e\'83\'5c\'81\'5b\'83\'67\'82\'c9\'90\'dd\'92\'e8\'82\'b5\'82\'dc\'82\'b7\'81\'42\'83\'66\'83\'74\'83\'48\'83\'8b\'83\'67\'82\'c5\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Set sorting algorithm to quick sort. This is the default.\
<!-- end locale -->\
@result script object : me\
*)\cf2 \

\b on
\b0  \cf5 use_bubblesort\cf2 ()\
	
\b set
\b0  
\b my
\b0  \cf5 _sort_handler\cf2  
\b to
\b0  \cf5 bubblesort_list2d\cf2 \
	
\b return
\b0  
\b me
\b0 \

\b end
\b0  \cf5 use_bubblesort\cf2 \
\

\b on
\b0  \cf5 quicksort_list2d\cf2 (\cf5 a_xlist2d\cf2 , \cf5 key_index\cf2 ) \cf7 -- must be placed before "use_quicksort" handler definition\cf2 \
	
\b set
\b0  \cf5 keylist\cf2  
\b to
\b0  \cf5 a_xlist2d\cf2 's \cf5 item_at\cf2 (\cf5 key_index\cf2 )\
	
\b return
\b0  \cf5 quicksort\cf2 (1, \cf5 keylist\cf2 's \cf5 count_items\cf2 (), \cf5 a_xlist2d\cf2 , \cf5 keylist\cf2 )\

\b end
\b0  \cf5 quicksort_list2d\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\

\f1 \'83\'5c\'81\'5b\'83\'67\'83\'41\'83\'8b\'83\'53\'83\'8a\'83\'59\'83\'80\'82\'f0\'83\'6f\'83\'75\'83\'8b\'83\'5c\'81\'5b\'83\'67\'82\'c9\'90\'dd\'92\'e8\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Set sorting algorithm to bubble sort.\
<!-- end locale -->\
@result script object : me\
*)\cf2 \

\b on
\b0  \cf5 use_quicksort\cf2 ()\
	
\b set
\b0  
\b my
\b0  \cf5 _sort_handler\cf2  
\b to
\b0  \cf5 quicksort_list2d\cf2 \
	
\b return
\b0  
\b me
\b0 \

\b end
\b0  \cf5 use_quicksort\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\

\f1 \'90\'dd\'92\'e8\'82\'b3\'82\'ea\'82\'c4\'82\'a2\'82\'e9
\f0  comparator script 
\f1 \'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Obtain current comparator script\
<!-- end locale -->\
@result script object\
*)\cf2 \

\b on
\b0  \cf5 comparator\cf2 ()\
	
\b return
\b0  
\b my
\b0  \cf5 _comparator\cf2 \

\b end
\b0  \cf5 comparator\cf2 \
\
\cf7 (*!@abstruct\
<!-- begin locale ja -->\
comparator script 
\f1 \'82\'f0\'90\'dd\'92\'e8\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Set a custom comparator to the instance.\
<!-- end locale -->\
@description\
<!-- begin locale ja -->\
comparator script 
\f1 \'82\'cd\'88\'c8\'89\'ba\'82\'cc\'8e\'64\'97\'6c\'82\'f0\'96\'9e\'82\'bd\'82\'b5\'82\'c4\'82\'a2\'82\'e9\'95\'4b\'97\'76\'82\'aa\'82\'a0\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
* 
\f1 \'93\'f1\'82\'c2\'82\'cc
\f0  positional parameter 
\f1 \'82\'f0\'8e\'9d\'82\'c2
\f0  do handler 
\f1 \'82\'f0\'8e\'c0\'91\'95\'82\'b5\'82\'c4\'82\'a2\'82\'e9\'81\'42
\f0 \
* do handler 
\f1 \'82\'cd\'8e\'9f\'82\'cc\'92\'6c\'82\'f0\'95\'d4\'82\'b7\'81\'42
\f0 \
	* 1 : 
\f1 \'91\'e6\'88\'ea\'88\'f8\'90\'94
\f0  &gt; 
\f1 \'91\'e6\'93\'f1\'88\'f8\'90\'94
\f0 \
	* 0 : 
\f1 \'91\'e6\'88\'ea\'88\'f8\'90\'94
\f0  = 
\f1 \'91\'e6\'93\'f1\'88\'f8\'90\'94
\f0 \
	* -1 : 
\f1 \'91\'e6\'88\'ea\'88\'f8\'90\'94
\f0  &lt; 
\f1 \'91\'e6\'93\'f1\'88\'f8\'90\'94
\f0 	\
<!-- begin locale en -->\
A custom comparator script must have following specification.\
* do handler which have two positional parameters.\
* do handler return following values\
	* 1 : first argument &gt; second argument\
	* 0 : first argument = second argument\
	* -1 : first argument &lt; second argument\
<!-- end locale -->\
@param a_comparator (script object)\
@result script object : me\
*)\cf2 \

\b on
\b0  \cf5 set_comparator\cf2 (\cf5 a_comparator\cf2 )\
	
\b set
\b0  
\b my
\b0  \cf5 _comparator\cf2  
\b to
\b0  \cf5 a_comparator\cf2 \
	
\b return
\b0  
\b me
\b0 \

\b end
\b0  \cf5 set_comparator\cf2 \
\

\b on
\b0  \cf5 exchange_item\cf2 (\cf5 i\cf2 , \cf5 j\cf2 , \cf5 a_xlist2d\cf2 )\
	
\b script
\b0  \cf5 exchanger\cf2 \
		
\b on
\b0  \cf5 do\cf2 (\cf5 a_xlist\cf2 )\
			\cf5 a_xlist\cf2 's \cf5 exchange_items\cf2 (\cf5 i\cf2 , \cf5 j\cf2 )\
			
\b return
\b0  \cf8 true\cf2 \
		
\b end
\b0  \cf5 do\cf2 \
	
\b end
\b0  
\b script
\b0 \
	\cf5 a_xlist2d\cf2 's \cf5 each\cf2 (\cf5 exchanger\cf2 )\

\b end
\b0  \cf5 exchange_item\cf2 \
\

\b on
\b0  \cf5 do\cf2 (\cf5 a_list2d\cf2 )\
	
\b return
\b0  \cf5 sort_list2d\cf2 (\cf5 a_list2d\cf2 )\

\b end
\b0  \cf5 do\cf2 \
\

\b on
\b0  \cf5 quicksort\cf2 (\cf5 beg_index\cf2 , \cf5 end_index\cf2 , \cf5 a_xlist2d\cf2 , \cf5 keylist\cf2 )\
	
\b local
\b0  \cf5 left_index\cf2 , \cf5 right_index\cf2 , \cf5 pivot_val\cf2 \
	\
	
\b copy
\b0  \cf5 beg_index\cf2  
\b to
\b0  \cf5 left_index\cf2 \
	
\b copy
\b0  \cf5 end_index\cf2  
\b to
\b0  \cf5 right_index\cf2 \
	\cf7 --copy item ((beg_index + end_index) div 2) of keylist to pivot_val\cf2 \
	
\b set
\b0  \cf5 pivot_val\cf2  
\b to
\b0  \cf5 keylist\cf2 's \cf5 item_at\cf2 ((\cf5 beg_index\cf2  + \cf5 end_index\cf2 ) 
\b div
\b0  2)\
	
\b repeat
\b0  
\b until
\b0  \cf5 right_index\cf2  
\b is
\b0  
\b less than
\b0  \cf5 left_index\cf2 \
		\cf7 --repeat while (left_index is less than or equal to end_index) and (my _comparator's do(item left_index of keylist, pivot_val) is (-1 * (my _sort_direction)))\cf2 \
		\cf7 --repeat while (left_index < end_index) and (my _comparator's do(item left_index of keylist, pivot_val) is (-1 * (my _sort_direction)))\cf2 \
		
\b repeat
\b0  
\b while
\b0  (
\b my
\b0  \cf5 _comparator\cf2 's \cf5 do\cf2 (\cf5 keylist\cf2 's \cf5 item_at\cf2 (\cf5 left_index\cf2 ), \cf5 pivot_val\cf2 ) 
\b is
\b0  (-1 * (
\b my
\b0  \cf5 _sort_direction\cf2 )))\
			
\b set
\b0  \cf5 left_index\cf2  
\b to
\b0  \cf5 left_index\cf2  + 1\
		
\b end
\b0  
\b repeat
\b0 \
		\
		\cf7 --repeat while (beg_index is less than or equal to right_index) and (my _comparator's do(item right_index of keylist, pivot_val) is my _sort_direction)\cf2 \
		\cf7 --repeat while (left_index is less than or equal to right_index) and (my _comparator's do(item right_index of keylist, pivot_val) is my _sort_direction)\cf2 \
		\cf7 --repeat while (left_index < right_index) and (my _comparator's do(item right_index of keylist, pivot_val) is in \{my _sort_direction, 0\})\cf2 \
		
\b repeat
\b0  
\b while
\b0  (
\b my
\b0  \cf5 _comparator\cf2 's \cf5 do\cf2 (\cf5 keylist\cf2 's \cf5 item_at\cf2 (\cf5 right_index\cf2 ), \cf5 pivot_val\cf2 ) 
\b is
\b0  
\b my
\b0  \cf5 _sort_direction\cf2 )\
			\cf7 --log item right_index of keylist\cf2 \
			
\b set
\b0  \cf5 right_index\cf2  
\b to
\b0  \cf5 right_index\cf2  - 1\
		
\b end
\b0  
\b repeat
\b0 \
		\
		
\b if
\b0  \cf5 left_index\cf2  
\b is
\b0  
\b less than
\b0  \cf5 right_index\cf2  
\b then
\b0 \
			
\b if
\b0  \cf5 keylist\cf2 's \cf5 item_at\cf2 (\cf5 right_index\cf2 ) 
\b is
\b0  
\b not
\b0  \cf5 keylist\cf2 's \cf5 item_at\cf2 (\cf5 left_index\cf2 ) 
\b then
\b0 \
				\cf5 exchange_item\cf2 (\cf5 left_index\cf2 , \cf5 right_index\cf2 , \cf5 a_xlist2d\cf2 )\
			
\b end
\b0  
\b if
\b0 \
			
\b set
\b0  \cf5 left_index\cf2  
\b to
\b0  \cf5 left_index\cf2  + 1\
			
\b set
\b0  \cf5 right_index\cf2  
\b to
\b0  \cf5 right_index\cf2  - 1\
		
\b else
\b0  
\b if
\b0  \cf5 left_index\cf2  
\b is
\b0  \cf5 right_index\cf2  
\b then
\b0 \
			
\b set
\b0  \cf5 left_index\cf2  
\b to
\b0  \cf5 left_index\cf2  + 1\
			
\b set
\b0  \cf5 right_index\cf2  
\b to
\b0  \cf5 right_index\cf2  - 1\
		
\b end
\b0  
\b if
\b0 \
	
\b end
\b0  
\b repeat
\b0 \
	\
	\cf7 --Do the two "subdivided" lists \cf2 \
	
\b if
\b0  \cf5 beg_index\cf2  < \cf5 right_index\cf2  
\b then
\b0  
\b tell
\b0  
\b me
\b0  
\b to
\b0  \cf5 quicksort\cf2 (\cf5 beg_index\cf2 , \cf5 right_index\cf2 , \cf5 a_xlist2d\cf2 , \cf5 keylist\cf2 )\
	
\b if
\b0  \cf5 end_index\cf2  > \cf5 left_index\cf2  
\b then
\b0  
\b tell
\b0  
\b me
\b0  
\b to
\b0  \cf5 quicksort\cf2 (\cf5 left_index\cf2 , \cf5 end_index\cf2 , \cf5 a_xlist2d\cf2 , \cf5 keylist\cf2 )\
	
\b return
\b0  \cf5 a_xlist2d\cf2 \

\b end
\b0  \cf5 quicksort\cf2 \
\
\

\b property
\b0  \cf5 _comparator\cf2  : \cf5 BaseComparator\cf2 \

\b property
\b0  \cf5 _sort_direction\cf2  : 1\

\b property
\b0  \cf5 _sort_handler\cf2  : \cf5 quicksort_list2d\cf2 \
\

\b on
\b0  \cf5 debug\cf2 ()\
	
\b \cf6 boot
\b0 \cf2  (
\b \cf6 module loader
\b0 \cf2 ) \cf6 for\cf2  
\b me
\b0 \
	
\b set
\b0  \cf5 a_list2d\cf2  
\b to
\b0  \{\{1, 2, 1, 2\}, \{1, 1, 2, 2\}\}\
	\cf7 --set a_list2d to \{\{"c", "a", "b", "a", "c", "b", "a"\}\}\cf2 \
	\cf7 --use_bubblesort()\cf2 \
	\cf5 sort_table\cf2 (\cf5 a_list2d\cf2 , 1)\

\b end
\b0  \cf5 debug\cf2 \
\

\b on
\b0  
\b \cf4 run
\b0 \cf2 \
	\cf7 --return debug()\cf2 \
	
\b try
\b0 \
		
\b \cf6 show helpbook
\b0 \cf2  (
\b \cf6 path to
\b0 \cf2  
\b me
\b0 ) 
\b with
\b0  \cf6 recovering InfoPlist\cf2 \
	
\b on
\b0  
\b error
\b0  \cf5 msg\cf2  \cf4 number\cf2  \cf5 errno\cf2 \
		
\b \cf6 display alert
\b0 \cf2  (\cf5 msg\cf2  & \cf3 return\cf2  & \cf5 errno\cf2 )\
	
\b end
\b0  
\b try
\b0 \

\b end
\b0  
\b \cf4 run
\b0 \cf2 \
}